{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"src/app/shared/utils/base-form\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/material/button\";\nimport * as i5 from \"@angular/material/card\";\nimport * as i6 from \"@angular/material/input\";\nimport * as i7 from \"@angular/material/form-field\";\nimport * as i8 from \"@angular/material/grid-list\";\nfunction LoginComponent_mat_error_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.baseForm.getErrorMessage(ctx_r0.loginForm.get(\"username\")), \" \");\n  }\n}\nfunction LoginComponent_mat_error_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r1.baseForm.getErrorMessage(ctx_r1.loginForm.get(\"password\")), \" \");\n  }\n}\nexport class LoginComponent {\n  onLogin() {}\n  constructor(fb, baseForm) {\n    this.fb = fb;\n    this.baseForm = baseForm;\n    this.loginForm = this.fb.group({\n      username: ['', [Validators.required]],\n      password: ['', [Validators.required, Validators.minLength(3)]]\n    });\n  }\n  ngOnInit() {}\n}\nLoginComponent.ɵfac = function LoginComponent_Factory(t) {\n  return new (t || LoginComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.BaseForm));\n};\nLoginComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: LoginComponent,\n  selectors: [[\"app-login\"]],\n  decls: 19,\n  vars: 6,\n  consts: [[\"cols\", \"1\", \"rowHeight\", \"100%\", 1, \"fondo\"], [3, \"formGroup\", \"ngSubmit\"], [\"appearance\", \"outline\", 1, \"full-width\"], [\"type\", \"text\", \"formControlName\", \"username\", \"matInput\", \"\"], [4, \"ngIf\"], [\"type\", \"password\", \"formControlName\", \"password\", \"matInput\", \"\", \"autocomplete\", \"new-password\"], [\"type\", \"submit\", \"mat-raised-button\", \"\", \"color\", \"primary\", 3, \"disabled\"]],\n  template: function LoginComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"mat-grid-list\", 0)(1, \"mat-grid-tile\")(2, \"mat-card\")(3, \"mat-card-content\")(4, \"h1\");\n      i0.ɵɵtext(5, \"Inicio de Sesi\\u00F3n\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(6, \"form\", 1);\n      i0.ɵɵlistener(\"ngSubmit\", function LoginComponent_Template_form_ngSubmit_6_listener() {\n        return ctx.onLogin();\n      });\n      i0.ɵɵelementStart(7, \"mat-form-field\", 2)(8, \"mat-label\");\n      i0.ɵɵtext(9, \"Usuario\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(10, \"input\", 3);\n      i0.ɵɵtemplate(11, LoginComponent_mat_error_11_Template, 2, 1, \"mat-error\", 4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(12, \"mat-form-field\", 2)(13, \"mat-label\");\n      i0.ɵɵtext(14, \"Contrase\\u00F1a\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(15, \"input\", 5);\n      i0.ɵɵtemplate(16, LoginComponent_mat_error_16_Template, 2, 1, \"mat-error\", 4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(17, \"button\", 6);\n      i0.ɵɵtext(18, \"Acceder\");\n      i0.ɵɵelementEnd()()()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(2);\n      i0.ɵɵclassProp(\"mat-elevation-z8\", true);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"formGroup\", ctx.loginForm);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngIf\", ctx.baseForm.isValidField(ctx.loginForm.get(\"username\")));\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngIf\", ctx.baseForm.isValidField(ctx.loginForm.get(\"password\")));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"disabled\", ctx.loginForm.invalid);\n    }\n  },\n  dependencies: [i3.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName, i4.MatButton, i5.MatCard, i5.MatCardContent, i6.MatInput, i7.MatFormField, i7.MatLabel, i7.MatError, i8.MatGridList, i8.MatGridTile],\n  styles: [\".fondo[_ngcontent-%COMP%] {\\n  height: 100%;\\n  background: rgb(150, 0, 0);\\n}\\n\\nmat-card[_ngcontent-%COMP%] {\\n  max-width: 40%;\\n  text-align: center;\\n}\\n\\nbutton[_ngcontent-%COMP%] {\\n  width: 100%;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvcGFnZXMvYXV0aC9sb2dpbi9sb2dpbi5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNJLFlBQUE7RUFDQSwwQkFBQTtBQUNKOztBQUVBO0VBQ0ksY0FBQTtFQUNBLGtCQUFBO0FBQ0o7O0FBRUE7RUFDSSxXQUFBO0FBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyIuZm9uZG97XHJcbiAgICBoZWlnaHQ6IDEwMCU7XHJcbiAgICBiYWNrZ3JvdW5kOiByZ2IoMTUwLCAwLCAwKTtcclxufVxyXG5cclxubWF0LWNhcmR7XHJcbiAgICBtYXgtd2lkdGg6IDQwJTtcclxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxufVxyXG5cclxuYnV0dG9ue1xyXG4gICAgd2lkdGg6IDEwMCU7XHJcbn0iXSwic291cmNlUm9vdCI6IiJ9 */\"]\n});","map":{"version":3,"mappings":"AACA,SAAsBA,UAAU,QAAQ,gBAAgB;;;;;;;;;;;;ICQhCC,iCAAoE;IAChEA,YACJ;IAAAA,iBAAY;;;;IADRA,eACJ;IADIA,kGACJ;;;;;IAKAA,iCAAoE;IAChEA,YACJ;IAAAA,iBAAY;;;;IADRA,eACJ;IADIA,kGACJ;;;ADTxB,OAAM,MAAOC,cAAc;EACzBC,OAAO,IAEP;EAOAC,YAAoBC,EAAgB,EAASC,QAAiB;IAA1C,OAAE,GAAFD,EAAE;IAAuB,aAAQ,GAARC,QAAQ;IALrD,cAAS,GAAG,IAAI,CAACD,EAAE,CAACE,KAAK,CAAC;MACxBC,QAAQ,EAAC,CAAC,EAAE,EAAC,CAACR,UAAU,CAACS,QAAQ,CAAC,CAAC;MACnCC,QAAQ,EAAC,CAAC,EAAE,EAAC,CAACV,UAAU,CAACS,QAAQ,EAAET,UAAU,CAACW,SAAS,CAAC,CAAC,CAAC,CAAC;KAC5D,CAAC;EAE8D;EAEhEC,QAAQ,IACR;;AAbWV,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;QAAdA,cAAc;EAAAW;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCT3BhB,wCAAuD;MAInCA,qCAAgB;MAAAA,iBAAK;MACzBA,+BAAqD;MAAvBA;QAAA,OAAYiB,aAAS;MAAA,EAAC;MAChDjB,yCAAwD;MACzCA,uBAAO;MAAAA,iBAAY;MAC9BA,4BAAwD;MACxDA,6EAEY;MAChBA,iBAAiB;MACjBA,0CAAwD;MACzCA,gCAAU;MAAAA,iBAAY;MACjCA,4BAAuF;MACvFA,6EAEY;MAChBA,iBAAiB;MACjBA,kCAAuF;MAAAA,wBAAO;MAAAA,iBAAS;;;MAlBzGA,eAA+B;MAA/BA,wCAA+B;MAG3BA,eAAuB;MAAvBA,yCAAuB;MAITA,eAAsD;MAAtDA,+EAAsD;MAOtDA,eAAsD;MAAtDA,+EAAsD;MAIdA,eAA8B;MAA9BA,gDAA8B","names":["Validators","i0","LoginComponent","onLogin","constructor","fb","baseForm","group","username","required","password","minLength","ngOnInit","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["D:\\Proyectos\\Unidad\\classroom\\src\\app\\pages\\auth\\login\\login.component.ts","D:\\Proyectos\\Unidad\\classroom\\src\\app\\pages\\auth\\login\\login.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { BaseForm } from 'src/app/shared/utils/base-form';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})\nexport class LoginComponent implements OnInit {\n  onLogin() {\n  \n  }\n\n  loginForm = this.fb.group({\n    username:['',[Validators.required]],\n    password:['',[Validators.required, Validators.minLength(3)]]\n  });\n\n  constructor(private fb : FormBuilder, public baseForm:BaseForm){}\n\n  ngOnInit(): void {\n  }\n\n}\n","<mat-grid-list cols=\"1\" rowHeight=\"100%\" class=\"fondo\">\n    <mat-grid-tile>\n        <mat-card [class.mat-elevation-z8]=\"true\">\n            <mat-card-content>\n                <h1>Inicio de Sesión</h1>\n                <form [formGroup]=\"loginForm\" (ngSubmit)=\"onLogin()\">\n                    <mat-form-field class=\"full-width\" appearance=\"outline\">\n                        <mat-label>Usuario</mat-label>\n                        <input type=\"text\" formControlName=\"username\" matInput/>\n                        <mat-error *ngIf=\"baseForm.isValidField(loginForm.get('username'))\">\n                            {{ baseForm.getErrorMessage(loginForm.get('username'))}}\n                        </mat-error>\n                    </mat-form-field>\n                    <mat-form-field class=\"full-width\" appearance=\"outline\">\n                        <mat-label>Contraseña</mat-label>\n                        <input type=\"password\" formControlName=\"password\" matInput autocomplete=\"new-password\">\n                        <mat-error *ngIf=\"baseForm.isValidField(loginForm.get('password'))\">\n                            {{baseForm.getErrorMessage(loginForm.get('password'))}}\n                        </mat-error>\n                    </mat-form-field>\n                    <button type=\"submit\" mat-raised-button color=\"primary\" [disabled]=\"loginForm.invalid\">Acceder</button>\n                </form>\n            </mat-card-content>\n        </mat-card>\n    </mat-grid-tile>\n</mat-grid-list>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}