{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class BaseForm {\n  constructor() {}\n  isValidField(form) {\n    var flag = false;\n    if (form != null) {\n      flag = form.touched || form.dirty && !form.valid;\n    }\n    return flag;\n  }\n  getErrorMessage(form) {\n    let mensaje = \"\";\n    if (form) {\n      const {\n        errors\n      } = form;\n      if (errors) {\n        const messages = {\n          required: 'Campo requerido',\n          email: 'Formato inválido',\n          pattern: 'Formato inválido',\n          nimError: 'El rango no es correcto',\n          nim: 'El rango no es correcto',\n          max: 'El rango no es correcto'\n        };\n        const errorKey = Object.keys(errors).find(Boolean);\n        if (errorKey) {\n          mensaje = messages[errorKey];\n        }\n      }\n    }\n    return mensaje;\n  }\n}\nBaseForm.ɵfac = function BaseForm_Factory(t) {\n  return new (t || BaseForm)();\n};\nBaseForm.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: BaseForm,\n  factory: BaseForm.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";AAIA,OAAM,MAAOA,QAAQ;EACjBC,eAAe;EAEfC,YAAY,CAACC,IAA0B;IACnC,IAAIC,IAAI,GAAG,KAAK;IAChB,IAAGD,IAAI,IAAI,IAAI,EAAC;MACZC,IAAI,GAAED,IAAI,CAACE,OAAO,IAAIF,IAAI,CAACG,KAAK,IAAI,CAACH,IAAI,CAACI,KAAK;;IAEnD,OAAOH,IAAI;EACf;EAEAI,eAAe,CAACL,IAA0B;IACtC,IAAIM,OAAO,GAAG,EAAE;IAChB,IAAGN,IAAI,EAAC;MACJ,MAAM;QAACO;MAAM,CAAC,GAAEP,IAAI;MACpB,IAAGO,MAAM,EAAC;QACN,MAAMC,QAAQ,GAAQ;UAClBC,QAAQ,EAAE,iBAAiB;UAC3BC,KAAK,EAAE,kBAAkB;UACzBC,OAAO,EAAE,kBAAkB;UAC3BC,QAAQ,EAAE,yBAAyB;UACnCC,GAAG,EAAE,yBAAyB;UAC9BC,GAAG,EAAE;SACR;QAED,MAAMC,QAAQ,GAAGC,MAAM,CAACC,IAAI,CAACV,MAAM,CAAC,CAACW,IAAI,CAACC,OAAO,CAAC;QAClD,IAAGJ,QAAQ,EAAC;UACRT,OAAO,GAACE,QAAQ,CAACO,QAAQ,CAAC;;;;IAItC,OAAOT,OAAO;EAClB;;AAhCST,QAAQ;mBAARA,QAAQ;AAAA;AAARA,QAAQ;SAARA,QAAQ;EAAAuB,SAARvB,QAAQ;EAAAwB,YADG;AAAM","names":["BaseForm","constructor","isValidField","form","flag","touched","dirty","valid","getErrorMessage","mensaje","errors","messages","required","email","pattern","nimError","nim","max","errorKey","Object","keys","find","Boolean","factory","providedIn"],"sourceRoot":"","sources":["D:\\Proyectos\\Unidad\\classroom\\src\\app\\shared\\utils\\base-form.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\r\nimport { AbstractControl } from \"@angular/forms\";\r\n\r\n@Injectable({providedIn:'root'})\r\nexport class BaseForm{\r\n    constructor(){ }\r\n\r\n    isValidField(form: AbstractControl|null){\r\n        var flag = false;\r\n        if(form != null){\r\n            flag= form.touched || form.dirty && !form.valid;\r\n        }\r\n        return flag;\r\n    }\r\n\r\n    getErrorMessage(form: AbstractControl|null){\r\n        let mensaje = \"\";\r\n        if(form){\r\n            const {errors}= form;\r\n            if(errors){\r\n                const messages: any = {\r\n                    required: 'Campo requerido',\r\n                    email: 'Formato inválido',\r\n                    pattern: 'Formato inválido',\r\n                    nimError: 'El rango no es correcto',\r\n                    nim: 'El rango no es correcto',\r\n                    max: 'El rango no es correcto'\r\n                }\r\n\r\n                const errorKey = Object.keys(errors).find(Boolean);\r\n                if(errorKey){\r\n                    mensaje=messages[errorKey];\r\n                }\r\n            }\r\n        }\r\n        return mensaje;\r\n    }\r\n\r\n    \r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}